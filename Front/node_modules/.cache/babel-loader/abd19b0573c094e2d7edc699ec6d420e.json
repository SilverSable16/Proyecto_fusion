{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aponc\\\\OneDrive\\\\Desktop\\\\Fusion\\\\Front\\\\src\\\\components\\\\cart\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/createContext();\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [cartItems, setCartItems] = useState(() => {\n    // Recuperar los elementos del carrito desde localStorage al iniciar\n    const storedCart = localStorage.getItem('cartItems');\n    return storedCart ? JSON.parse(storedCart) : [];\n  });\n\n  // Función para actualizar el carrito en el estado y en localStorage\n  const updateCart = items => {\n    setCartItems(items);\n    localStorage.setItem('cartItems', JSON.stringify(items));\n  };\n  const addToCart = item => {\n    // Verifica si el producto ya está en el carrito\n    const existingItem = cartItems.find(cartItem => cartItem.idAlimento === item.idAlimento);\n    if (existingItem) {\n      // Si ya existe, incrementa la cantidad\n      existingItem.quantity += item.quantity; // Usa item.quantity para agregar a la cantidad existente\n      updateCart([...cartItems]); // Actualiza el carrito en el estado y localStorage\n    } else {\n      // Si no existe, establece la cantidad en 1\n      const newItem = {\n        ...item,\n        quantity: 1\n      };\n      updateCart([...cartItems, newItem]); // Agrega el nuevo item\n    }\n    console.log(\"Item added to cart:\", item); // Para depuración\n  };\n  const removeFromCart = (itemId, quantityToRemove) => {\n    const updatedCart = cartItems.map(item => {\n      if (item.idAlimento === itemId) {\n        // Reduce la cantidad\n        item.quantity -= quantityToRemove;\n        return item;\n      }\n      return item;\n    }).filter(item => item.quantity > 0); // Elimina el producto si su cantidad es 0\n    updateCart(updatedCart);\n    console.log(\"Updated cart:\", updatedCart); // Para depuración\n  };\n\n  // Efecto para sincronizar el estado del carrito con localStorage cuando cambia\n  useEffect(() => {\n    localStorage.setItem('cartItems', JSON.stringify(cartItems));\n  }, [cartItems]);\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cartItems,\n      addToCart,\n      removeFromCart\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\n// Hook para usar el contexto de carrito\n_s(CartProvider, \"EgAH/8uV1CLJVsdZ8wlokv3DVJo=\");\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  return useContext(CartContext);\n};\n_s2(useCart, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","CartContext","CartProvider","children","_s","cartItems","setCartItems","storedCart","localStorage","getItem","JSON","parse","updateCart","items","setItem","stringify","addToCart","item","existingItem","find","cartItem","idAlimento","quantity","newItem","console","log","removeFromCart","itemId","quantityToRemove","updatedCart","map","filter","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","$RefreshReg$"],"sources":["C:/Users/aponc/OneDrive/Desktop/Fusion/Front/src/components/cart/CartContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\nexport const CartContext = createContext();\r\n\r\nexport const CartProvider = ({ children }) => {\r\n    const [cartItems, setCartItems] = useState(() => {\r\n        // Recuperar los elementos del carrito desde localStorage al iniciar\r\n        const storedCart = localStorage.getItem('cartItems');\r\n        return storedCart ? JSON.parse(storedCart) : [];\r\n    });\r\n\r\n    // Función para actualizar el carrito en el estado y en localStorage\r\n    const updateCart = (items) => {\r\n        setCartItems(items);\r\n        localStorage.setItem('cartItems', JSON.stringify(items));\r\n    };\r\n\r\n    const addToCart = (item) => {\r\n        // Verifica si el producto ya está en el carrito\r\n        const existingItem = cartItems.find(cartItem => cartItem.idAlimento === item.idAlimento);\r\n        if (existingItem) {\r\n            // Si ya existe, incrementa la cantidad\r\n            existingItem.quantity += item.quantity; // Usa item.quantity para agregar a la cantidad existente\r\n            updateCart([...cartItems]); // Actualiza el carrito en el estado y localStorage\r\n        } else {\r\n            // Si no existe, establece la cantidad en 1\r\n            const newItem = { ...item, quantity: 1 };\r\n            updateCart([...cartItems, newItem]); // Agrega el nuevo item\r\n        }\r\n        console.log(\"Item added to cart:\", item); // Para depuración\r\n    };\r\n\r\n    const removeFromCart = (itemId, quantityToRemove) => {\r\n        const updatedCart = cartItems.map((item) => {\r\n            if (item.idAlimento === itemId) {\r\n                // Reduce la cantidad\r\n                item.quantity -= quantityToRemove;\r\n                return item;\r\n            }\r\n            return item;\r\n        }).filter(item => item.quantity > 0); // Elimina el producto si su cantidad es 0\r\n        updateCart(updatedCart);\r\n        console.log(\"Updated cart:\", updatedCart); // Para depuración\r\n    };\r\n\r\n    // Efecto para sincronizar el estado del carrito con localStorage cuando cambia\r\n    useEffect(() => {\r\n        localStorage.setItem('cartItems', JSON.stringify(cartItems));\r\n    }, [cartItems]);\r\n\r\n    return (\r\n        <CartContext.Provider value={{ cartItems, addToCart, removeFromCart }}>\r\n            {children}\r\n        </CartContext.Provider>\r\n    );\r\n};\r\n\r\n// Hook para usar el contexto de carrito\r\nexport const useCart = () => {\r\n    return useContext(CartContext);\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}